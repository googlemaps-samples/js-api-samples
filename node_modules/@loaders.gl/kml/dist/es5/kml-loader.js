"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._typecheckKMLLoader = exports.KMLLoader = void 0;
var _gis = require("@loaders.gl/gis");
var _togeojson = require("@tmcw/togeojson");
const VERSION = typeof "3.4.15" !== 'undefined' ? "3.4.15" : 'latest';
const KML_HEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<kml xmlns=\"http://www.opengis.net/kml/2.2\">";
const KMLLoader = {
  name: 'KML (Keyhole Markup Language)',
  id: 'kml',
  module: 'kml',
  version: VERSION,
  extensions: ['kml'],
  mimeTypes: ['application/vnd.google-earth.kml+xml'],
  text: true,
  tests: [KML_HEADER],
  parse: async (arrayBuffer, options) => parseTextSync(new TextDecoder().decode(arrayBuffer), options),
  parseTextSync,
  options: {
    kml: {},
    gis: {}
  }
};
exports.KMLLoader = KMLLoader;
function parseTextSync(text, options) {
  var _options$gis, _options$kml, _options$kml2;
  const doc = new DOMParser().parseFromString(text, 'text/xml');
  const geojson = (0, _togeojson.kml)(doc);
  const shape = (options === null || options === void 0 ? void 0 : (_options$gis = options.gis) === null || _options$gis === void 0 ? void 0 : _options$gis.format) || (options === null || options === void 0 ? void 0 : (_options$kml = options.kml) === null || _options$kml === void 0 ? void 0 : _options$kml.type) || (options === null || options === void 0 ? void 0 : (_options$kml2 = options.kml) === null || _options$kml2 === void 0 ? void 0 : _options$kml2.shape);
  switch (shape) {
    case 'object-row-table':
      {
        const table = {
          shape: 'object-row-table',
          data: geojson.features
        };
        return table;
      }
    case 'geojson-row-table':
      {
        const table = {
          shape: 'geojson-row-table',
          data: geojson.features
        };
        return table;
      }
    case 'geojson':
      return geojson;
    case 'binary':
      return (0, _gis.geojsonToBinary)(geojson.features);
    case 'raw':
      return doc;
    default:
      return geojson;
  }
}
const _typecheckKMLLoader = KMLLoader;
exports._typecheckKMLLoader = _typecheckKMLLoader;
//# sourceMappingURL=kml-loader.js.map